[{"name":"app.R","content":"library(shiny)\r\nlibrary(pwr)\r\nlibrary(ggplot2)\r\n\r\nui <- fluidPage(\r\n    tags$head(\r\n        tags$meta(charset = \"utf-8\"),  # Ensure proper UTF-8 encoding\r\n        tags$link(rel = \"stylesheet\", href = \"https://fonts.googleapis.com/css?family=Open+Sans&display=swap\"),\r\n        tags$style(HTML(\"\r\n      body { font-family: 'Open Sans', sans-serif; font-size: 20px; }\r\n      .shiny-input-container { font-size: 16px; }\r\n      .form-control { font-size: 20px; }\r\n      .btn { font-size: 20px; }\r\n      h3 { font-size: 24px; font-weight: bold; }\r\n      .help-block { font-size: 18px; }\r\n      #sample_size { font-size: 22px; font-weight: bold; color: #333; padding: 10px; border: 2px solid #ddd; background-color: #f9f9f9; border-radius: 5px; white-space: pre-wrap; }\r\n      .custom-header { font-size: 20px; font-weight: bold; margin-top: 20px; }\r\n    \"))\r\n    ),\r\n    \r\n    titlePanel(\"Analiza apriori statističke moći za jednu kategoričku varijablu\"),\r\n    \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            numericInput(\"k\", \"Broj kategorija:\", value = 3, min = 2),\r\n            \r\n            uiOutput(\"category_names_ui\"),\r\n            uiOutput(\"proportions_ui\"),\r\n            \r\n            numericInput(\"power\", \"Snaga testa:\", value = 0.8, min = 0.01, max = 1, step = 0.01),\r\n            numericInput(\"sig_level\", \"Nivo značajnosti (alpha):\", \r\n                         value = 0.05, min = 0.001, max = 0.1, step = 0.001),\r\n            \r\n            actionButton(\"calculate\", \"Izračunaj potreban broj ispitanika\")\r\n        ),\r\n        \r\n        mainPanel(\r\n            h3(\"Rezultati\"),\r\n            verbatimTextOutput(\"sample_size\"),\r\n            plotOutput(\"power_plot\")\r\n        )\r\n    )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n    \r\n    # UI for naming the categories\r\n    output$category_names_ui <- renderUI({\r\n        req(input$k)\r\n        lapply(1:input$k, function(i) {\r\n            textInput(inputId = paste0(\"cat_\", i),\r\n                      label = paste(\"Naziv kategorije\", i),\r\n                      value = paste(\"Kategorija\", i))\r\n        })\r\n    })\r\n    \r\n    # UI for proportions once names are filled in\r\n    output$proportions_ui <- renderUI({\r\n        req(input$k)\r\n        names_entered <- sapply(1:input$k, function(i) input[[paste0(\"cat_\", i)]])\r\n        if (any(is.null(names_entered) | names_entered == \"\")) return(NULL)\r\n        \r\n        tagList(\r\n            div(class = \"custom-header\", \"Nulta hipoteza - očekivane proporcije:\"),\r\n            lapply(1:input$k, function(i) {\r\n                numericInput(inputId = paste0(\"null_\", i),\r\n                             label = paste(\"Očekivana proporcija za kategoriju\", names_entered[i]),\r\n                             value = round(1 / input$k, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            }),\r\n            div(class = \"custom-header\", \"Alternativna hipoteza - očekivane proporcije:\"),\r\n            lapply(1:input$k, function(i) {\r\n                numericInput(inputId = paste0(\"alt_\", i),\r\n                             label = paste(\"Očekivana proporcija za kategoriju\", names_entered[i]),\r\n                             value = round(1 / input$k, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            })\r\n        )\r\n    })\r\n    \r\n    observeEvent(input$calculate, {\r\n        req(input$k)\r\n        cat_names  <- sapply(1:input$k, function(i) input[[paste0(\"cat_\", i)]])\r\n        null_probs <- sapply(1:input$k, function(i) input[[paste0(\"null_\", i)]])\r\n        alt_probs  <- sapply(1:input$k, function(i) input[[paste0(\"alt_\", i)]])\r\n        \r\n        if (any(is.null(null_probs)) || any(is.null(alt_probs))) return()\r\n        if (abs(sum(null_probs) - 1) > 0.01 || abs(sum(alt_probs) - 1) > 0.01) {\r\n            output$sample_size <- renderPrint({\r\n                cat(\"Greška: Zbir proporcija za svaku hipotezu pojedinačno mora biti 1.\")\r\n            })\r\n            return()\r\n        }\r\n        \r\n        if (input$k == 2) {\r\n            # Binominal test using pwr.p.test for two categories\r\n            p0 <- null_probs[1]\r\n            p1 <- alt_probs[1]\r\n            h  <- abs(2 * asin(sqrt(p1)) - 2 * asin(sqrt(p0)))\r\n            \r\n            result <- pwr.p.test(h = h, power = input$power, sig.level = input$sig_level)\r\n            \r\n            # In pwr.p.test, sample size is stored in result$n\r\n            required <- result$n\r\n            \r\n            output$sample_size <- renderPrint({\r\n                cat(\"Izračunata veličina efekta (h):\", round(h, 4), \"\\n\")\r\n                cat(capture.output(print(result)), sep = \"\\n\")\r\n            })\r\n            \r\n            output$power_plot <- renderPlot({\r\n                # Dynamically set x-axis range based on required sample size\r\n                upper_limit <- ceiling(max(required * 1.5, required + 50))\r\n                n_values <- seq(10, upper_limit, by = 5)\r\n                power_values <- sapply(n_values, function(n) {\r\n                    pwr.p.test(h = h, sig.level = input$sig_level, n = n)$power\r\n                })\r\n                df_plot <- data.frame(N = n_values, Power = power_values)\r\n                \r\n                ggplot(df_plot, aes(x = N, y = Power)) +\r\n                    geom_line(color = \"blue\", size = 1.2) +\r\n                    geom_hline(yintercept = input$power, linetype = \"dashed\", color = \"red\") +\r\n                    labs(title = \"Snaga testa u zavisnosti od veličine uzorka\",\r\n                         x = \"Veličina uzorka (N)\",\r\n                         y = \"Snaga (Power)\") +\r\n                    theme_minimal(base_size = 20)\r\n            })\r\n            \r\n        } else {\r\n            # Chi-squared test for more than two categories\r\n            w  <- sqrt(sum((alt_probs - null_probs)^2 / null_probs))\r\n            df <- input$k - 1\r\n            \r\n            result <- pwr.chisq.test(w = w, df = df, power = input$power, sig.level = input$sig_level)\r\n            \r\n            # In pwr.chisq.test, sample size is stored in result$N\r\n            required <- result$N\r\n            \r\n            output$sample_size <- renderPrint({\r\n                cat(\"Izračunata veličina efekta (w):\", round(w, 4), \"\\n\")\r\n                cat(capture.output(print(result)), sep = \"\\n\")\r\n            })\r\n            \r\n            output$power_plot <- renderPlot({\r\n                upper_limit <- ceiling(max(required * 1.5, required + 50))\r\n                n_values <- seq(10, upper_limit, by = 5)\r\n                power_values <- sapply(n_values, function(n) {\r\n                    pwr.chisq.test(w = w, df = df, sig.level = input$sig_level, N = n)$power\r\n                })\r\n                df_plot <- data.frame(N = n_values, Power = power_values)\r\n                \r\n                ggplot(df_plot, aes(x = N, y = Power)) +\r\n                    geom_line(color = \"blue\", size = 1.2) +\r\n                    geom_hline(yintercept = input$power, linetype = \"dashed\", color = \"red\") +\r\n                    labs(title = \"Snaga testa u zavisnosti od veličine uzorka\",\r\n                         x = \"Veličina uzorka (N)\",\r\n                         y = \"Snaga (Power)\") +\r\n                    theme_minimal(base_size = 20)\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"README.md","content":"# power_1cat","type":"text"},{"name":"power_1cat.Rproj","content":"Version: 1.0\r\nProjectId: f095cf8c-a647-493f-9000-0654d49e9288\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 4\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
